{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n# demo_script.py\n# Perceptron Classifier Demo on Iris Dataset\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import load_iris\nfrom perceptron import Perceptron\nfrom utils import plot_decision_region\n\n# Load and prepare data\niris = load_iris()\nmask = (iris.target == 0) | (iris.target == 1)\nX = iris.data[mask][:, [0, 2]]  # Sepal length & petal length\ny = iris.target[mask]\n\n# Shuffle data\nperm = np.random.permutation(len(X))\nX, y = X[perm], y[perm]\n\n# Train perceptron\nclf = Perceptron(eta=0.01, n_iter=10)\nclf.fit(X, y)\n\n# Plot decision boundary\nplot_decision_region(X, y, clf)\nplt.xlabel(\"Sepal Length\")\nplt.ylabel(\"Petal Length\")\nplt.title(\"Decision Boundary (Perceptron)\")\nplt.show()\n\n# Plot error over epochs\nplt.plot(range(1, len(clf.errors_) + 1), clf.errors_, marker='o')\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Number of Misclassifications\")\nplt.title(\"Training Error Over Time\")\nplt.show()\n","metadata":{"_uuid":"6d52f42d-844a-4b27-b6df-88a25fdadee9","_cell_guid":"3915903d-4764-4886-9a51-03b62f172f97","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null}]}