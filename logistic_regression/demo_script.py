# -*- coding: utf-8 -*-
"""perceptron.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vBkRx3zcZqLB5_Zuq6uHAsPLXGc655Hl
"""

# demo_script.py

import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris, load_digits
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression as SklearnLogisticRegression

# Import your custom classes and utility function
from logistic_regression.logistic_binary import LogisticRegression_
from logistic_regression.logistic_multiclass import MultiClassLogisticRegression
from logistic_regression.utils import plot_decision_region

def binary_classification_demo():
    print("=== Binary Classification Demo (Iris Dataset) ===")

    # Load Iris data (two classes only: Setosa and Versicolor)
    iris = load_iris()
    binary_mask = (iris.target == 0) | (iris.target == 1)
    X = iris.data[binary_mask][:, (0, 2)]  # Use Sepal length & Petal length
    y = iris.target[binary_mask]

    # Shuffle
    perm = np.random.permutation(len(X))
    X, y = X[perm], y[perm]

    # Train model
    model = LogisticRegression_(n_iter=100, eta=0.05, random_state=42)
    model.fit(X, y)

    # Plot decision boundary
    plt.figure(figsize=(6, 4))
    plot_decision_region(X, y, model)
    plt.title('Binary Logistic Regression Decision Region')
    plt.xlabel('Sepal length (cm)')
    plt.ylabel('Petal length (cm)')
    plt.legend()
    plt.tight_layout()
    plt.show()

def multiclass_classification_demo():
    print("=== Multiclass Classification Demo (Digits Dataset) ===")

    # Load data
    digits = load_digits()
    X_train, X_test, y_train, y_test = train_test_split(
        digits.data, digits.target, test_size=0.2, random_state=42
    )

    # Standardize
    scaler = StandardScaler()
    X_train = scaler.fit_transform(X_train)
    X_test = scaler.transform(X_test)

    # Train sklearn model
    skl_model = SklearnLogisticRegression(max_iter=1000, multi_class='ovr')
    skl_model.fit(X_train, y_train)

    # Train custom model
    custom_model = MultiClassLogisticRegression(n_iter=1000, eta=0.1, early_stopping=10, random_state=42)
    custom_model.fit(X_train, y_train)

    # Evaluate
    skl_acc = accuracy_score(y_test, skl_model.predict(X_test))
    custom_acc = accuracy_score(y_test, custom_model.predict(X_test))

    print(f"Sklearn Logistic Regression Accuracy: {skl_acc:.3f}")
    print(f"Custom Logistic Regression Accuracy:  {custom_acc:.3f}")

if __name__ == "__main__":
    binary_classification_demo()
    multiclass_classification_demo()