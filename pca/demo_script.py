# -*- coding: utf-8 -*-
"""perceptron.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vBkRx3zcZqLB5_Zuq6uHAsPLXGc655Hl
"""

# demo_script.py

import numpy as np
from sklearn.datasets import load_wine
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA as SklearnPCA
from pca import PCAFromScratch
import matplotlib.pyplot as plt

def main():
    # Load data
    X, y = load_wine(return_X_y=True)
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, stratify=y, random_state=42)

    # Standardize
    scaler = StandardScaler()
    X_train_sd = scaler.fit_transform(X_train)
    X_test_sd = scaler.transform(X_test)

    # Custom PCA
    custom_pca = PCAFromScratch(n_components=2)
    X_train_pca = custom_pca.fit_transform(X_train_sd)

    # Sklearn PCA
    sklearn_pca = SklearnPCA(n_components=2)
    X_train_skpca = sklearn_pca.fit_transform(X_train_sd)

    # Output shapes
    print("Custom PCA shape:", X_train_pca.shape)
    print("Sklearn PCA shape:", X_train_skpca.shape)

    # Plot comparison
    plt.figure(figsize=(10, 4))
    plt.suptitle("PCA Comparison")

    plt.subplot(1, 2, 1)
    for label in np.unique(y_train):
        plt.scatter(X_train_pca[y_train == label, 0], X_train_pca[y_train == label, 1], label=f'Class {label}')
    plt.title("Custom PCA")
    plt.legend()

    plt.subplot(1, 2, 2)
    for label in np.unique(y_train):
        plt.scatter(X_train_skpca[y_train == label, 0], X_train_skpca[y_train == label, 1], label=f'Class {label}')
    plt.title("Sklearn PCA")
    plt.legend()

    plt.tight_layout()
    plt.show()

if __name__ == "__main__":
    main()