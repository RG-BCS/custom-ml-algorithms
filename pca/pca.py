# -*- coding: utf-8 -*-
"""perceptron.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vBkRx3zcZqLB5_Zuq6uHAsPLXGc655Hl
"""

# pca.py

import numpy as np

class PCAFromScratch:
    """
    Principal Component Analysis (PCA) from scratch using NumPy.
    """
    def __init__(self, n_components):
        self.n_components = n_components
        self.components_ = None
        self.mean_ = None
        self.explained_variance_ = None

    def fit(self, X):
        # Standardize
        X = np.asarray(X)
        self.mean_ = np.mean(X, axis=0)
        X_centered = X - self.mean_

        # Covariance matrix
        cov_mat = np.cov(X_centered.T)

        # Eigen decomposition
        eig_vals, eig_vecs = np.linalg.eig(cov_mat)

        # Sort eigenvectors
        idxs = np.argsort(eig_vals)[::-1]
        eig_vals = eig_vals[idxs]
        eig_vecs = eig_vecs[:, idxs]

        # Store top components
        self.components_ = eig_vecs[:, :self.n_components]
        self.explained_variance_ = eig_vals[:self.n_components]

        return self

    def transform(self, X):
        X_centered = X - self.mean_
        return X_centered @ self.components_

    def fit_transform(self, X):
        self.fit(X)
        return self.transform(X)